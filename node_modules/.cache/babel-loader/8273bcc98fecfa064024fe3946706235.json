{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User1\\\\Documents\\\\Udemy_React\\\\candy_crush\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport ScoreBoard from './components/ScoreBoard';\nimport blueCandy from './images/blue-candy.png';\nimport greenCandy from './images/green-candy.png';\nimport orangeCandy from './images/orange-candy.png';\nimport purpleCandy from './images/purple-candy.png';\nimport redCandy from './images/red-candy.png';\nimport yellowCandy from './images/yellow-candy.png';\nimport blank from './images/blank.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\n\nconst App = () => {\n  _s();\n\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 4);\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n\n      if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 4);\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 3);\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n\n      if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 3);\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n\n  const dragStart = e => {\n    setSquareBeingDragged(e.target);\n  };\n\n  const dragDrop = e => {\n    setSquareBeingReplaced(e.target);\n  };\n\n  const dragEnd = () => {\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\n    currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\n    const validMoves = [squareBeingDraggedId - 1, squareBeingDraggedId - width, squareBeingDraggedId + 1, squareBeingDraggedId + width];\n    const validMove = validMoves.includes(squareBeingReplacedId);\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\n      currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangement.map((candyColor, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: candyColor,\n        alt: candyColor,\n        \"data-id\": index,\n        draggable: true,\n        onDragStart: dragStart,\n        onDragOver: e => e.preventDefault(),\n        onDragEnter: e => e.preventDefault(),\n        onDragLeave: e => e.preventDefault(),\n        onDrop: dragDrop,\n        onDragEnd: dragEnd\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      score: scoreDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"a6C/FUeBHOw5DCQEvzerpKvJb3M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ScoreBoard","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","blank","width","candyColors","App","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","decidedColor","isBlank","every","square","score","forEach","checkForRowOfFour","rowOfFour","notValid","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","firstRow","isFirstRow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMoves","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","createBoard","randomColorArrangement","randomColor","push","timer","setInterval","clearInterval","map","candyColor","index","preventDefault"],"sources":["C:/Users/User1/Documents/Udemy_React/candy_crush/src/App.js"],"sourcesContent":["import {useEffect, useState} from 'react'\nimport ScoreBoard from './components/ScoreBoard'\nimport blueCandy from './images/blue-candy.png'\nimport greenCandy from './images/green-candy.png'\nimport orangeCandy from './images/orange-candy.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\nimport blank from './images/blank.png'\n\nconst width = 8\nconst candyColors = [\n    blueCandy,\n    orangeCandy,\n    purpleCandy,\n    redCandy,\n    yellowCandy,\n    greenCandy\n]\n\nconst App = () => {\n    const [currentColorArrangement, setCurrentColorArrangement] = useState([])\n    const [squareBeingDragged, setSquareBeingDragged] = useState(null)\n    const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n    const [scoreDisplay, setScoreDisplay] = useState(0)\n\n    const checkForColumnOfFour = () => {\n        for (let i = 0; i <= 39; i++) {\n            const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\n            const decidedColor = currentColorArrangement[i]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 4)\n                columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const checkForRowOfFour = () => {\n        for (let i = 0; i < 64; i++) {\n            const rowOfFour = [i, i + 1, i + 2, i + 3]\n            const decidedColor = currentColorArrangement[i]\n            const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (notValid.includes(i)) continue\n\n            if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 4)\n                rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const checkForColumnOfThree = () => {\n        for (let i = 0; i <= 47; i++) {\n            const columnOfThree = [i, i + width, i + width * 2]\n            const decidedColor = currentColorArrangement[i]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 3)\n                columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const checkForRowOfThree = () => {\n        for (let i = 0; i < 64; i++) {\n            const rowOfThree = [i, i + 1, i + 2]\n            const decidedColor = currentColorArrangement[i]\n            const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (notValid.includes(i)) continue\n\n            if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 3)\n                rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const moveIntoSquareBelow = () => {\n        for (let i = 0; i <= 55; i++) {\n            const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n            const isFirstRow = firstRow.includes(i)\n\n            if (isFirstRow && currentColorArrangement[i] === blank) {\n                let randomNumber = Math.floor(Math.random() * candyColors.length)\n                currentColorArrangement[i] = candyColors[randomNumber]\n            }\n\n            if ((currentColorArrangement[i + width]) === blank) {\n                currentColorArrangement[i + width] = currentColorArrangement[i]\n                currentColorArrangement[i] = blank\n            }\n        }\n    }\n\n    const dragStart = (e) => {\n        setSquareBeingDragged(e.target)\n    }\n    const dragDrop = (e) => {\n        setSquareBeingReplaced(e.target)\n    }\n    const dragEnd = () => {\n        const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\n        const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n\n        currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\n        currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\n\n        const validMoves = [\n            squareBeingDraggedId - 1,\n            squareBeingDraggedId - width,\n            squareBeingDraggedId + 1,\n            squareBeingDraggedId + width\n        ]\n\n        const validMove = validMoves.includes(squareBeingReplacedId)\n\n        const isAColumnOfFour = checkForColumnOfFour()\n        const isARowOfFour = checkForRowOfFour()\n        const isAColumnOfThree = checkForColumnOfThree()\n        const isARowOfThree = checkForRowOfThree()\n\n        if (squareBeingReplacedId &&\n            validMove &&\n            (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n            setSquareBeingDragged(null)\n            setSquareBeingReplaced(null)\n        } else {\n            currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n            currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n            setCurrentColorArrangement([...currentColorArrangement])\n        }\n    }\n\n\n    const createBoard = () => {\n        const randomColorArrangement = []\n        for (let i = 0; i < width * width; i++) {\n            const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n            randomColorArrangement.push(randomColor)\n        }\n        setCurrentColorArrangement(randomColorArrangement)\n    }\n\n    useEffect(() => {\n        createBoard()\n    }, [])\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            checkForColumnOfFour()\n            checkForRowOfFour()\n            checkForColumnOfThree()\n            checkForRowOfThree()\n            moveIntoSquareBelow()\n            setCurrentColorArrangement([...currentColorArrangement])\n        }, 100)\n        return () => clearInterval(timer)\n    }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\n\n\n    return (\n        <div className=\"app\">\n            <div className=\"game\">\n                {currentColorArrangement.map((candyColor, index) => (\n                    <img\n                        key={index}\n                        src={candyColor}\n                        alt={candyColor}\n                        data-id={index}\n                        draggable={true}\n                        onDragStart={dragStart}\n                        onDragOver={(e) => e.preventDefault()}\n                        onDragEnter={(e) => e.preventDefault()}\n                        onDragLeave={(e) => e.preventDefault()}\n                        onDrop={dragDrop}\n                        onDragEnd={dragEnd}\n                    />\n                ))}\n            </div>\n            <ScoreBoard score={scoreDisplay}/>\n        </div>\n    )\n}\n\nexport default App\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}